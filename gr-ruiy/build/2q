#!/usr/bin/env python
# -*- coding: utf-8 -*-
# 
# Copyright 2017 <+YOU OR YOUR COMPANY+>.
# 
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
# 
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
# 

from gnuradio.digital.generic_mod_demod import generic_mod
import numpy
from gnuradio import gr
import gnuradio.digital.digital_swig as digital_swig
from gnuradio.digital.bpsk import bpsk_mod
from gnuradio.digital.qpsk import qpsk_mod
from gnuradio.digital.utils import mod_codes
# The default encoding (e.g. gray-code, set-partition)
_def_mod_code = mod_codes.GRAY_CODE
_def_excess_bw = 0.35
_def_constellation_points = 4
_def_differential = True
# gr.sync_block
def psk_constellation(m=_def_constellation_points, mod_code=_def_mod_code, differential=_def_differential):
    """
    Creates a PSK constellation object.
    """
    k = log(m) / log(2.0)
    if (k != int(k)):
        raise StandardError('Number of constellation points must be a power of two.')
    points = [exp(2*pi*(0+1j)*i/m) for i in range(0,m)]
    pre_diff_code, post_diff_code = create_encodings(mod_code, m, differential)
    if post_diff_code is not None:
        inverse_post_diff_code = mod_codes.invert_code(post_diff_code)
        points = [points[x] for x in inverse_post_diff_code]
    constellation = digital_swig.constellation_psk(points, pre_diff_code, m)
    return constellation

class mul_mod(generic_mod):
    """
    docstring for block mul_mod
    """
    def __init__(self, mod_type, mod_code=_def_mod_code, differential=False, excess_bw=_def_excess_bw):
        if mod_type == "bpsk":
            constellation = digital_swig.constellation_bpsk()
            super(mul_mod, self).__init__(constellation=constellation, differential=differential)

        if mod_type == "qpsk":
            pre_diff_code = True
            if not differential:
                constellation = digital_swig.constellation_qpsk()
                if mod_code != mod_codes.GRAY_CODE:
                    raise ValueError("This QPSK mod/demod works only for gray-coded constellations.")
                else:
                    constellation = digital_swig.constellation_dqpsk()
                    if mod_code not in set([mod_codes.GRAY_CODE, mod_codes.NO_CODE]):
                        raise ValueError("That mod_code is not supported for DQPSK mod/demod.")
                    if mod_code == mod_codes.NO_CODE:
                        pre_diff_code = False
            super(mul_mod, self).__init__(constellation=constellation, differential=differential,
                                          pre_diff_code=pre_diff_code, excess_bw=excess_bw)
        if mod_type == "4psk":
            constellation = psk_constellation(4, mod_code, differential)
            super(mul_mod, self).__init__(constellation, differential)

#    def work(self, input_items, output_items):
#        in0 = input_items[0]
#        out = output_items[0]
#        # <+signal processing here+>
#        out[:] = in0
#        return len(output_items[0])

